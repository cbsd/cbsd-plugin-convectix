#!/usr/local/bin/cbsd
#v11.1.19
MYARG="jname vm_size vm_cpus vm_ram vm_os_type"
MYOPTARG="ip4_addr gw authkey host_hostname mask pause_after_err astart bhyve_vnc_tcp_bind"
MYDESC="Obtaing new VM"
ADDHELP="vm_ram - in megabytes\n\
authkey - can be 'node' or fullpath to pubkey\n\
ip4_addr - can be 'DHCP' or 'REALDHCP'\n"
CBSDMODULE="convectix"

. ${subr}
. ${system}
. ${strings}
. ${workdir}/universe.subr
. ${workdir}/bhyve.subr
. ${tools}

astart=0
bhyve_vnc_tcp_bind=

init $*

oastart="${astart}"
obhyve_vnc_tcp_bind="${bhyve_vnc_tcp_bind}"

readconf freecloud.conf

[ -z "${cbsd_queue_name}" ] && cbsd_queue_name="/clonos/bhyvevms/"
[ -z "${pause_after_err}" ] && pause_after_err=0
[ -z "${template_wait_offline}" ] && template_wait_offline="30"	# max seconds to wait when template going to offline when it online

#defines
_MYDIR=$( /usr/bin/dirname `realpath $0` )

### MAIN Route ###
set -e
	. ${_MYDIR}/vm_ssh.subr
set +e

if [ -n "${vm_size}" ]; then
	orig_vm_size="${vm_size}"
fi

if [ -n "${mask}" ]; then
	orig_mask="${mask}"
fi

if [ -n "${vm_cpus}" ]; then
	orig_vm_cpus="${vm_cpus}"
fi

if [ -n "${vm_ram}" ]; then
	orig_vm_ram="${vm_ram}"
fi

if [ -z "${ip4_addr}" ]; then
	orig_ip4_addr="DHCP"
else
	orig_ip4_addr="${ip4_addr}"
fi

if [ -z "${gw}" ]; then
	orig_gw="10.0.0.1"
else
	orig_gw="${gw}"
fi

if [ -z "${host_hostname}" ]; then
	orig_host_hostname="${jname}.convectix.com"
else
	orig_host_hostname="${host_hostname}"
fi

if [ -z "${authkey}" ]; then
	orig_authkey=0
else
	orig_authkey="${authkey}"
fi

TRAP=""

if [ "${orig_authkey}" != "0" ]; then

	prefix=$( substr --pos=0 --len=1 --str="${orig_authkey}" )

	if [ "${prefix}" = "/" ]; then
		# file-based authkey
		[ ! -r "${orig_authkey}" ] && err 1 "${MAGENTA}No such pubkey: ${GREEN}${orig_authkey}${NORMAL}"
	else
		${ECHO} "${MAGENTA}Select authkey from database for: ${GREEN}${orig_authkey}${NORMAL}"
		authtmp=$( /usr/bin/mktemp )
		/usr/bin/truncate -s0 ${authtmp}
		cbsdsql authkey "SELECT authkey FROM authkey WHERE name=\"${orig_authkey}\"" >> ${authtmp}
		authkey_file_size=$( /usr/bin/stat -f "%z" ${authtmp} 2>/dev/null )
		if [ "${authkey_file_size}" = "0" ]; then
			${ECHO} "${MAGENTA}No such pubkey in database, rollback to FS: ${GREEN}${sshdir}/authorized_keys${NORMAL}"
			/bin/cp -a ${sshdir}/authorized_keys ${authtmp}
			orig_authkey="${authtmp}"
		else
			${ECHO} "${MAGENTA}Authkey key found in DB for: ${GREEN}${orig_authkey},${authtmp}${NORMAL}"
			orig_authkey="${authtmp}"
			TRAP="${TRAP} /bin/rm -f ${orig_authkey};"
			trap "${TRAP}" HUP INT QUIT ABRT KILL ALRM TERM BUS EXIT
		fi
	fi
fi

ovm_os_type="${vm_os_type}"
. ${jrcconf}
[ $? -eq 0 ] && err 1 "${MAGENTA}Already exist: ${GREEN}${jname}${NORMAL}"

vm_os_type="${ovm_os_type}"

${ECHO} "${GREEN}READY${NORMAL}"
lockfile="/tmp/vm_obtain.lock"

[ -f ${lockfile} ] && err 1 "Already locked $lockfile"

/usr/bin/touch ${lockfile}
trap "/etc/rc.d/ctld onestop > /dev/null 2>&1; /bin/rm -f ${lockfile}" HUP INT ABRT BUS TERM EXIT

readconf freecloud.conf

${ECHO} "${MAGENTA}OS profile: ${GREEN}${vm_os_type}${NORMAL}"
eval service_vm_ip="\$convectix_srv_${vm_os_type}_ip"

[ -z "${service_vm_ip}" ] && err 1 "${MAGENTA}Empty service_vm_ip: Please set template_vm_${vm_os_type} in freecloud.conf${NORMAL}"
[ -z "${template_vm}" ] && eval template_vm="\$template_vm_${vm_os_type}"	# source for clone_vm
[ -z "${clone_vm}" ] && eval clone_vm="\$clone_vm_${vm_os_type}"		# source for clone_vm
[ -z "${login}" -o "${login}" = "unset" ] && eval login="\$login_${vm_os_type}"	# login for VM
[ -z "${pw}" -o "${pw}" = "unset" ] && eval pw="\$pw_${vm_os_type}"		# login for VM
[ -z "${resizer_opts}" -o "${resizer_opts}" = "unset" ] && eval resizer_opts="\$resizer_${vm_os_type}_opts"	# login for VM

[ -z "${service_vm_ip}" -o "${service_vm_ip}" = "unset" ] && err 1 "${MAGENTA}Please set convectix_srv_${vm_os_type} in freecloud.conf${NORMAL}"
[ -z "${template_vm}" -o "${template_vm}" = "unset" ] && err 1 "${MAGENTA}Please set template_vm_${vm_os_type} in freecloud.conf${NORMAL}"
[ -z "${clone_vm}" -o "${clone_vm}" = "unset" ] && err 1 "${MAGENTA}Please set clone_vm_${vm_os_type} in freecloud.conf${NORMAL}"

[ -z "${template_vm}" ] && err 1 "${MAGENTA}Empty template_vm${NORMAL}"
[ -z "${clone_vm}" ] && err 1 "${MAGENTA}Empty clone_vm${NORMAL}"
[ -z "${service_vm_ip}" ] && err 1 "${MAGENTA}Empty service_vm_ip${NORMAL}"
[ -z "${login}" ] && err 1 "${MAGENTA}Please set login_${vm_os_type} in freecloud.conf${NORMAL}"
[ -z "${pw}" ] && err 1 "${MAGENTA}Please set pw_${vm_os_type} in freecloud.conf${NORMAL}"

echo ":: ${service_vm_ip}"

init_ssh

${ssh_cmd} -C date > /dev/null 2>&1
[ $? -ne 0 ] && err 1 "No ssh connection with resizer service: ${ssh_cmd}"

${ECHO} "${MAGENTA}Connection to ${service_vm_ip} passed${NORMAL}"

vm_size=$( echo ${orig_vm_size} | /usr/bin/tr -d "[:alpha:]" )

# Check if SIZE if valid: can't be smaller then template
if is_number ${vm_size}; then
	# not number, try to convert
	if conv2bytes "${vm_size}"; then
		vm_ram_bytes="${convval}"
	else
		err 1 "${vm_size} is not number and we can't convert int via conv2bytes"
	fi
else
	# assume that number in gigabytes
	vm_bytes=$(( vm_size * 1024 * 1024 * 1024 ))
	# >>                   MB     KB      B <<
fi

## Check vm_ram value
if is_number ${orig_vm_ram}; then
	# not number, try to convert
	if conv2bytes "${orig_vm_ram}"; then
		vm_ram_bytes="${convval}"
	else
		err 1 "${orig_vm_ram} is not number and we can't convert int via conv2bytes"
	fi
	vm_ram_megabytes=$(( vm_ram_bytes / 1024 / 1024 ))
else
	# assume that number in megabytes
	vm_ram_megabytes=${orig_vm_ram}
fi

${ECHO} "${MAGENTA}RAM IN MBytes: ${GREEN}${vm_ram_megabytes}${NORMAL}"

[ ${vm_ram_megabytes} -lt 128 ] && err 1 "RAM to small, < 128 MB"

orig_vm_ram=${vm_ram_megabytes}

# get ZVOL size
readconf zfs.conf
. ${zfstool}

#echo "/sbin/zfs get -Hp -o value volsize zroot/ROOT/default/bcbsd-emptyf110a-dsk1.vhd"
tmplink="${jaildatadir}/${template_vm}-data/dsk1.vhd"

if is_getzvol ${tmplink}; then
	template_vol="${is_zvol}"
else
	err 1 "Can't determine ZVOL for template: ${template_vm}, no such link from ${tmplink}"
fi

${ECHO} "${MAGENTA}:: Template VOL: ${GREEN}${is_zvol}${NORMAL}"

template_bytes=$( /sbin/zfs get -Hp -o value volsize ${is_zvol} )

template_bytes=$(( template_bytes + 1000000000 ))

${ECHO} "${MAGENTA}:: Template Bytes: ${GREEN}${template_bytes} ( + 1GB buffer)${NORMAL}"
${ECHO} "${MAGENTA}:: VM Bytes request: ${GREEN}${vm_bytes}${NORMAL}"

if [ ${template_bytes} -gt ${vm_bytes} ]; then
	convval=$( ${miscdir}/conv2human ${template_bytes} |/usr/bin/tr '[:upper:]' '[:lower:]' )
	echo "Template size: ${convval}  (< ${vm_size})"
	err 1 "VM size can't be smaller than template size"
fi

# CBSD QUEUE
if [ -x "${moduledir}/cbsd_queue.d/cbsd_queue" ]; then
	[ "${cbsd_queue_name}" != "none" ] && cbsd_queue cbsd_queue_name=${cbsd_queue_name} id=${jname} cmd=bcreate vm_ram=${vm_ram} vm_cpus=${vm_cpus} vm_os_type=${vm_os_type} astart=${astart} protected=${protected} status=1
fi

ready_for_process=1

while [ ${ready_for_process} -ne 0 ]; do

	### check for online
	clone_jid=$( jstatus jname=${clone_vm} )
	template_jid=$( jstatus jname=${template_vm} )

	ready_for_process=$(( clone_jid + template_jid ))

	if [ ${ready_for_process} -gt 0 ]; then
		${ECHO} "${MAGENTA}template/clone not in offline state, waiting ${template_wait_offline}...${NORMAL}"
		sleep 1
		template_wait_offline=$(( template_wait_offline - 1 ))
	fi

	[ ${template_wait_offline} -lt 1 ] && err 1 "${MAGENTA}Not in offline mode, please stop then${NORMAL}"
done

brename old=${clone_vm} new=${jname} host_hostname=${orig_host_hostname}
task mode=new /usr/local/bin/cbsd bclone old=${template_vm} new=${clone_vm} mac_reinit=1 > /dev/null 2>&1
echo "--"

case "${orig_ip4_addr}" in
	[Rr][Ee][Aa][Ll][Dd][Hh][Cc][Pp])
		echo "HERE"
		gw=0
		mask=0
		orig_mask=0
		;;
esac

echo "vm_resize jname=${jname} size=${vm_size} ip4_addr=${orig_ip4_addr} gw=${orig_gw} authkey=${orig_authkey} vm_os_type=${vm_os_type} host_hostname=${orig_host_hostname} login=${login} pw=${pw} pause_after_err=${pause_after_err} service_vm_ip=${service_vm_ip} resizer_opts=${resizer_opts}"
#### BACK ME
#timeout 60 vm_resize jname=${jname} size=${vm_size} ip4_addr="${orig_ip4_addr}" gw="${orig_gw}" authkey="${orig_authkey}" vm_os_type="${vm_os_type}" host_hostname="${orig_host_hostname}" login="${login} pw=${pw}"
echo "Ready to resizing"
vm_resize jname=${jname} size=${vm_size} ip4_addr="${orig_ip4_addr}" gw="${orig_gw}" authkey="${orig_authkey}" vm_os_type="${vm_os_type}" host_hostname="${orig_host_hostname}" login="${login} pw=${pw} pause_after_err=${pause_after_err}" service_vm_ip="${service_vm_ip}" resizer_opts="${resizer_opts}"

ret=$?

if [ ${ret} -ne 0 ]; then
	echo "Error in vm_resize."
	bremove ${jname} > /dev/null 2>&1
	jremove ${jname} > /dev/null 2>&1
	/bin/rm -f ${lockfile}
	exit 1
fi

echo "--"
echo "bset jname=${jname} vm_ram=${vm_ram} vm_cpus=${vm_cpus}"
bset jname=${jname} vm_ram="${vm_ram}" vm_cpus="${vm_cpus}" ip4_addr="${orig_ip4_addr}"
bset jname=${jname} protected=0
bset jname=${jname} hidden=0

[ -n "${obhyve_vnc_tcp_bind}" ] && bset jname=${jname} bhyve_vnc_tcp_bind="${obhyve_vnc_tcp_bind}"

/bin/rm -f ${lockfile}

echo "vm_bootcfg jname=${jname} ip4_addr=${orig_ip4_addr} gw=${orig_gw} mask=${orig_mask} authkey=node"
vm_bootcfg jname=${jname} ip4_addr=${orig_ip4_addr} gw=${orig_gw} mask=${orig_mask} authkey=node

# CBSD QUEUE
if [ -x "${moduledir}/cbsd_queue.d/cbsd_queue" ]; then
	[ "${cbsd_queue_name}" != "none" ] && cbsd_queue cbsd_queue_name=${cbsd_queue_name} id=${jname} cmd=bcreate vm_ram=${vm_ram} vm_cpus=${vm_cpus} vm_os_type=${vm_os_type} astart=${astart} protected=${protected} status=2
fi

# Re-init MAC address even bclone reset it.
#
cbsdsql ${jailsysdir}/${jname}/local.sqlite "UPDATE bhyvenic SET nic_hwaddr=\"0\""

[ "${oastart}" = "1" ] && bstart ${jname}

${ECHO} "${MAGENTA}Credential for new vm${NORMAL}"
${ECHO} "${MAGENTA}IP: ${GREEN}${orig_ip4_addr}${NORMAL}"
${ECHO} "${MAGENTA}User: ${GREEN}${login}${NORMAL}"
${ECHO} "${MAGENTA}Password: ${GREEN}${pw}${NORMAL}"
${ECHO} "${MAGENTA}Key: ${GREEN}${convectix_ssh_privatekey}${NORMAL}"
